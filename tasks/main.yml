---
# Variable setup.
- name: Include OS-specific variables.
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Define nginx_user.
  ansible.builtin.set_fact:
    nginx_user: "{{ __nginx_user }}"
  when: nginx_user is not defined
# Setup/install tasks.
- name: Include RedHat setup tasks
  ansible.builtin.include_tasks: setup-redhat.yml
  when: ansible_os_family == 'RedHat' or ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'

- name: Include Ubuntu setup tasks
  ansible.builtin.include_tasks: setup-ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- name: Include Debian setup tasks
  ansible.builtin.include_tasks: setup-debian.yml
  when: ansible_os_family == 'Debian'

- name: Include FreeBSD setup tasks
  ansible.builtin.include_tasks: setup-freebsd.yml
  when: ansible_os_family == 'FreeBSD'

- name: Include OpenBSD setup tasks
  ansible.builtin.include_tasks: setup-openbsd.yml
  when: ansible_os_family == 'OpenBSD'

- name: Include Archlinux setup tasks
  ansible.builtin.include_tasks: setup-archlinux.yml
  when: ansible_os_family == 'Archlinux'

# Vhost configuration.
- name: Import vhosts tasks
  ansible.builtin.import_tasks: vhosts.yml
# Nginx setup.
- name: Copy nginx configuration in place.
  ansible.builtin.template:
    src: "{{ nginx_conf_template }}"
    dest: "{{ nginx_conf_file_path }}"
    owner: root
    group: "{{ root_group }}"
    mode: '0644'
  notify:
    - Reload nginx

- name: Ensure nginx service is running as configured.
  ansible.builtin.service:
    name: nginx
    state: "{{ nginx_service_state }}"
    enabled: "{{ nginx_service_enabled }}"
